<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title if title else 'Mike Henke | Coder. Engineer. Professional.' }}</title>
    <meta name="description" content="Mike Henke - Full-stack web and mobile developer with 15+ years of experience. Specializing in JavaScript, Python, React, and modern web technologies.">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="{{ '/pagefind/pagefind-ui.css' | url }}" rel="stylesheet"> <!-- Pagefind CSS first -->
    <link rel="stylesheet" href="{{ '/styles.css' | url }}"> <!-- Custom styles second -->
    <link rel="icon" href="{{ '/favicon.ico' | url }}">
</head>
<body>
    <!-- Skip Navigation Links for Screen Readers -->
    <a href="#main-content" class="skip-link">Skip to main content</a>
    <a href="#nav-menu" class="skip-link">Skip to navigation</a>
    
    <nav class="navbar" role="navigation" aria-label="Main navigation">
        <div class="navbar-container">
            <div class="navbar-brand" role="banner">Mike Henke</div>
            
            <!-- Mobile Menu Toggle Button -->
            <button class="navbar-toggle" aria-label="Toggle navigation menu" aria-expanded="false" aria-controls="nav-menu">
                <i class="fas fa-bars" aria-hidden="true"></i>
            </button>
            
            <ul class="navbar-links" id="nav-menu" role="menubar">
                <li role="none" class="nav-priority-high"><a href="{{ '/' | url }}" role="menuitem"><span class="nav-text">Home</span></a></li>
                <li role="none" class="nav-priority-high"><a href="{{ '/' | url }}#about" role="menuitem"><span class="nav-text">About</span></a></li>
                <li role="none" class="nav-priority-high"><a href="{{ '/' | url }}#skills" role="menuitem"><span class="nav-text">Skills</span></a></li>
                <li role="none" class="nav-divider" aria-hidden="true"></li>
                <li role="none" class="nav-priority-medium"><a href="{{ '/' | url }}#career" role="menuitem"><span class="nav-text">Resume</span></a></li>
                <li role="none" class="nav-priority-medium"><a href="{{ '/' | url }}#portfolio" role="menuitem"><span class="nav-text">Portfolio</span></a></li>
                <li role="none" class="nav-priority-medium"><a href="{{ '/' | url }}#contact" role="menuitem"><span class="nav-text">Contact</span></a></li>
                <li role="none" class="nav-divider" aria-hidden="true"></li>
                <li role="none" class="nav-priority-low"><a href="{{ '/blog/' | url }}" role="menuitem"><span class="nav-text">Blog</span></a></li>
                <li role="none" class="nav-priority-low"><a href="{{ '/search/' | url }}" role="menuitem"><span class="nav-text">Search</span></a></li>
            </ul>
        </div>
    </nav>
    <main id="main-content" role="main">
        <!-- ARIA live region for screen reader announcements -->
        <div id="sr-announcements" aria-live="polite" aria-atomic="true" class="sr-only"></div>
        {{ content | safe }}
    </main>
    <footer role="contentinfo" aria-label="Site footer">
        <p>Â© {{ "now" | date("yyyy") }} Mike Henke. All Rights Reserved.</p>
    </footer>
    <script src="{{ '/pagefind/pagefind-ui.js' | url }}" type="text/javascript" defer></script>
    <script>
        window.addEventListener('DOMContentLoaded', (event) => {
            // Mobile Navigation Toggle
            const navToggle = document.querySelector('.navbar-toggle');
            const navLinks = document.querySelector('.navbar-links');
            
            if (navToggle && navLinks) {
                navToggle.addEventListener('click', () => {
                    const isExpanded = navToggle.getAttribute('aria-expanded') === 'true';
                    
                    // Toggle aria-expanded
                    navToggle.setAttribute('aria-expanded', !isExpanded);
                    
                    // Toggle menu visibility
                    navLinks.classList.toggle('nav-open');
                    
                    // Update hamburger icon
                    const icon = navToggle.querySelector('i');
                    if (icon) {
                        icon.className = navLinks.classList.contains('nav-open') 
                            ? 'fas fa-times' 
                            : 'fas fa-bars';
                    }
                });

                // Close mobile menu when clicking on a nav link
                const navLinkItems = navLinks.querySelectorAll('a');
                navLinkItems.forEach(link => {
                    link.addEventListener('click', () => {
                        if (window.innerWidth < 768) {
                            navLinks.classList.remove('nav-open');
                            navToggle.setAttribute('aria-expanded', 'false');
                            const icon = navToggle.querySelector('i');
                            if (icon) {
                                icon.className = 'fas fa-bars';
                            }
                        }
                    });
                });

                // Close mobile menu when clicking outside
                document.addEventListener('click', (event) => {
                    if (!navToggle.contains(event.target) && !navLinks.contains(event.target)) {
                        if (navLinks.classList.contains('nav-open')) {
                            navLinks.classList.remove('nav-open');
                            navToggle.setAttribute('aria-expanded', 'false');
                            const icon = navToggle.querySelector('i');
                            if (icon) {
                                icon.className = 'fas fa-bars';
                            }
                        }
                    }
                });

                // Handle window resize - close mobile menu if switching to desktop
                window.addEventListener('resize', () => {
                    if (window.innerWidth >= 768) {
                        navLinks.classList.remove('nav-open');
                        navToggle.setAttribute('aria-expanded', 'false');
                        const icon = navToggle.querySelector('i');
                        if (icon) {
                            icon.className = 'fas fa-bars';
                        }
                    }
                });
            }

            if (document.getElementById("search")) {
                try {
                    // Auto-detect bundle path or use explicit path
                    const bundlePath = window.location.pathname.includes('/search/') ? '../pagefind/' : '/pagefind/';
                    
                    new PagefindUI({ 
                        element: "#search", 
                        showSubResults: true,
                        showEmptyFilters: false,
                        resetStyles: false,
                        autofocus: true,
                        debounceTimeoutMs: 300,
                        bundlePath: bundlePath,
                        excerptLength: 30
                    });
                    console.log('PagefindUI initialized successfully');
                } catch (error) {
                    console.error('Failed to initialize PagefindUI:', error);
                }
            }

            // Animated Progress Bars - Intersection Observer
            const progressBars = document.querySelectorAll('.progress-bar[data-width]');
            
            if (progressBars.length > 0) {
                const animateProgressBar = (progressBar) => {
                    const targetWidth = progressBar.getAttribute('data-width');
                    const span = progressBar.querySelector('span');
                    
                    if (span && targetWidth) {
                        // Add animate class to enable transitions
                        progressBar.classList.add('animate');
                        
                        // Set the target width after a small delay to trigger animation
                        setTimeout(() => {
                            span.style.width = targetWidth + '%';
                        }, 50);
                    }
                };

                // Check if Intersection Observer is supported
                if ('IntersectionObserver' in window) {
                    const observerOptions = {
                        root: null,
                        rootMargin: '0px 0px -10% 0px', // Trigger when 90% visible
                        threshold: 0.1
                    };

                    const observer = new IntersectionObserver((entries) => {
                        entries.forEach((entry) => {
                            if (entry.isIntersecting && !entry.target.classList.contains('animate')) {
                                animateProgressBar(entry.target);
                                // Stop observing this element once animated
                                observer.unobserve(entry.target);
                            }
                        });
                    }, observerOptions);

                    // Start observing all progress bars
                    progressBars.forEach((progressBar) => {
                        observer.observe(progressBar);
                    });
                } else {
                    // Fallback: animate immediately if Intersection Observer not supported
                    progressBars.forEach((progressBar) => {
                        animateProgressBar(progressBar);
                    });
                }
            }
        });
    </script>
    {{ '' }}<!-- Remove the previously added script block here if it exists -->
</body>
</html>
