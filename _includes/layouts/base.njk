<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title if title else 'Mike Henke | Coder. Engineer. Professional.' }}</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="{{ '/pagefind/pagefind-ui.css' | url }}" rel="stylesheet"> <!-- Pagefind CSS first -->
    <link rel="stylesheet" href="{{ '/styles.css' | url }}"> <!-- Custom styles second -->
    <link rel="icon" href="{{ '/favicon.ico' | url }}">
</head>
<body>
    <nav class="navbar">
        <div class="navbar-container">
            <div class="navbar-brand">Mike Henke</div>
            <ul class="navbar-links">
                <li><a href="{{ '/' | url }}">Home</a></li>
                <li><a href="{{ '/' | url }}#about">About</a></li>
                <li><a href="{{ '/' | url }}#skills">Skills</a></li>
                <li><a href="{{ '/' | url }}#career">Resume</a></li>
                <li><a href="{{ '/' | url }}#portfolio">Portfolio</a></li>
                <li><a href="{{ '/' | url }}#contact">Contact</a></li>
                <li><a href="{{ '/blog/' | url }}">Blog</a></li>
                <li><a href="{{ '/search/' | url }}">Search</a></li>
            </ul>
        </div>
    </nav>
    <main>
        {{ content | safe }}
    </main>
    <footer>
        <p>Â© {{ "now" | date("yyyy") }} Mike Henke. All Rights Reserved.</p>
    </footer>
    <script src="{{ '/pagefind/pagefind-ui.js' | url }}" type="text/javascript" defer></script>
    <script>
        window.addEventListener('DOMContentLoaded', (event) => {
            if (document.getElementById("search")) {
                new PagefindUI({ 
                    element: "#search", 
                    showSubResults: true,
                    showEmptyFilters: false,
                    resetStyles: false,
                    autofocus: true,
                    debounceTimeoutMs: 300,
                    // Enhanced search configuration
                    bundlePath: "/pagefind/",
                    baseUrl: "/",
                    forceLanguage: "en",
                    // Case insensitive search configuration
                    processTerm: function(term) {
                        return term.toLowerCase();
                    }
                });
            }

            // Animated Progress Bars - Intersection Observer
            const progressBars = document.querySelectorAll('.progress-bar[data-width]');
            
            if (progressBars.length > 0) {
                const animateProgressBar = (progressBar) => {
                    const targetWidth = progressBar.getAttribute('data-width');
                    const span = progressBar.querySelector('span');
                    
                    if (span && targetWidth) {
                        // Add animate class to enable transitions
                        progressBar.classList.add('animate');
                        
                        // Set the target width after a small delay to trigger animation
                        setTimeout(() => {
                            span.style.width = targetWidth + '%';
                        }, 50);
                    }
                };

                // Check if Intersection Observer is supported
                if ('IntersectionObserver' in window) {
                    const observerOptions = {
                        root: null,
                        rootMargin: '0px 0px -10% 0px', // Trigger when 90% visible
                        threshold: 0.1
                    };

                    const observer = new IntersectionObserver((entries) => {
                        entries.forEach((entry) => {
                            if (entry.isIntersecting && !entry.target.classList.contains('animate')) {
                                animateProgressBar(entry.target);
                                // Stop observing this element once animated
                                observer.unobserve(entry.target);
                            }
                        });
                    }, observerOptions);

                    // Start observing all progress bars
                    progressBars.forEach((progressBar) => {
                        observer.observe(progressBar);
                    });
                } else {
                    // Fallback: animate immediately if Intersection Observer not supported
                    progressBars.forEach((progressBar) => {
                        animateProgressBar(progressBar);
                    });
                }
            }
        });
    </script>
    {{ '' }}<!-- Remove the previously added script block here if it exists -->
</body>
</html>
