<!-- Shared JavaScript for all layouts -->
<script src="{{ '/pagefind/pagefind-ui.js' | url }}" type="text/javascript" defer></script>
<script>
    window.addEventListener('DOMContentLoaded', (event) => {
        // New Mobile Navigation Toggle
        const navToggle = document.querySelector('.navbar-toggle');
        const navLinks = document.querySelector('.navbar-links');
        const navOverlay = document.querySelector('.nav-overlay');
        const menuClose = document.querySelector('.menu-close');
        
        if (navToggle && navLinks) {
            // Store scroll position for restoration
            let scrollPosition = 0;

            function openMobileMenu() {
                scrollPosition = window.pageYOffset;
                navToggle.setAttribute('aria-expanded', 'true');
                navLinks.classList.add('active');
                navToggle.classList.add('active');
                if (navOverlay) {
                    navOverlay.classList.add('active');
                }
                document.body.classList.add('nav-open');
                document.body.style.top = `-${scrollPosition}px`;
            }

            function closeMobileMenu() {
                navLinks.classList.remove('active');
                navToggle.classList.remove('active');
                navToggle.setAttribute('aria-expanded', 'false');
                if (navOverlay) {
                    navOverlay.classList.remove('active');
                }
                document.body.classList.remove('nav-open');
                document.body.style.top = '';
                if (scrollPosition) {
                    window.scrollTo(0, scrollPosition);
                    scrollPosition = 0;
                }
            }

            // Hamburger menu toggle
            navToggle.addEventListener('click', () => {
                const isExpanded = navToggle.getAttribute('aria-expanded') === 'true';
                
                if (!isExpanded) {
                    openMobileMenu();
                } else {
                    closeMobileMenu();
                }
            });

            // Close button in mobile menu
            if (menuClose) {
                menuClose.addEventListener('click', () => {
                    closeMobileMenu();
                });
            }

            // Close mobile menu when clicking on a nav link
            const navLinkItems = navLinks.querySelectorAll('a');
            navLinkItems.forEach(link => {
                link.addEventListener('click', () => {
                    if (window.innerWidth < 768) {
                        closeMobileMenu();
                    }
                });
            });

            // Close mobile menu when clicking on overlay
            if (navOverlay) {
                navOverlay.addEventListener('click', () => {
                    closeMobileMenu();
                });
            }

            // Close mobile menu when pressing Escape key
            document.addEventListener('keydown', (event) => {
                if (event.key === 'Escape' && navLinks.classList.contains('active')) {
                    closeMobileMenu();
                }
            });

            // Handle window resize - close mobile menu if switching to desktop
            window.addEventListener('resize', () => {
                if (window.innerWidth >= 768) {
                    closeMobileMenu();
                }
            });
        }

        // Process search results for consistent formatting
        function processSearchResults() {
            const results = document.querySelectorAll('.pagefind-ui__result:not([data-enhanced])');
            
            console.log(`Processing ${results.length} new search results`);
            
            results.forEach(result => {
                // Add our blog post card styling to match the existing blog listings
                result.classList.add('blog-post-card');
                
                // Enhance the existing title
                const title = result.querySelector('.pagefind-ui__result-title');
                if (title) {
                    title.classList.add('blog-post-title');
                }
                
                // Enhance the existing excerpt
                const excerpt = result.querySelector('.pagefind-ui__result-excerpt');
                if (excerpt) {
                    excerpt.classList.add('blog-post-excerpt');
                }
                
                // Style existing meta tags as categories
                const metaTags = result.querySelectorAll('.pagefind-ui__result-tag');
                metaTags.forEach(tag => {
                    tag.classList.add('category-tag');
                });
                
                // Mark as enhanced to avoid duplicate processing
                result.setAttribute('data-enhanced', 'true');
            });
        }

        // Initialize Pagefind Search if search element exists
        if (document.getElementById("search")) {
            try {
                // Auto-detect bundle path or use explicit path
                const bundlePath = window.location.pathname.includes('/search/') ? '../pagefind/' : '/pagefind/';
                
                const searchConfig = { 
                    element: "#search", 
                    showSubResults: true,
                    showEmptyFilters: false,
                    resetStyles: false,
                    autofocus: true,
                    debounceTimeoutMs: 300,
                    bundlePath: bundlePath,
                    excerptLength: 30,
                    // Process each result to enhance metadata and structure
                    processResult: function(result) {
                        console.log('Processing result:', result);
                        
                        // Extract publish date from URL structure if available
                        if (result.url && result.url.includes('/blog/')) {
                            const urlParts = result.url.split('/');
                            const dateMatch = result.url.match(/\/blog\/(\d{4}-\d{2}-\d{2})-/);
                            if (dateMatch) {
                                result.meta.date = dateMatch[1];
                            }
                        }
                        
                        // Ensure we have a category for styling
                        if (!result.meta.category && result.meta.tags && result.meta.tags.length > 0) {
                            result.meta.category = result.meta.tags[0];
                        }
                        
                        // Clean up title if needed
                        if (result.meta.title) {
                            result.meta.title = result.meta.title.replace(/\s+/g, ' ').trim();
                        }
                        
                        return result;
                    }
                };

                // Add custom result template for search page
                if (window.location.pathname.includes('/search/')) {
                    searchConfig.showImages = false;
                    searchConfig.showSubResults = true;
                }
                
                const pagefindUI = new PagefindUI(searchConfig);
                
                // Process results after they load (works on any page with search)
                const searchElement = document.getElementById("search");
                if (searchElement) {
                    console.log('Setting up search results observer');
                    
                    let processingTimeout;
                    
                    // Single robust observer with debouncing
                    const observer = new MutationObserver((mutations) => {
                        let shouldProcess = false;
                        
                        mutations.forEach((mutation) => {
                            if (mutation.addedNodes.length > 0) {
                                // Check if search results were added
                                const hasResults = Array.from(mutation.addedNodes).some(node => 
                                    node.nodeType === 1 && 
                                    (node.classList && node.classList.contains('pagefind-ui__result') || 
                                     (node.querySelector && node.querySelector('.pagefind-ui__result')))
                                );
                                
                                if (hasResults) {
                                    shouldProcess = true;
                                }
                            }
                        });
                        
                        if (shouldProcess) {
                            console.log('New search results detected, scheduling processing...');
                            
                            // Clear any existing timeout to debounce rapid changes
                            if (processingTimeout) {
                                clearTimeout(processingTimeout);
                            }
                            
                            // Process after DOM has settled
                            processingTimeout = setTimeout(() => {
                                console.log('Processing search results...');
                                processSearchResults();
                            }, 100);
                        }
                    });
                    
                    observer.observe(searchElement, { 
                        childList: true, 
                        subtree: true 
                    });
                    
                    // Process any existing results that might have loaded before observer setup
                    setTimeout(() => processSearchResults(), 100);
                    const searchInput = searchElement.querySelector('input[type="search"]');
                    if (searchInput) {
                        searchInput.addEventListener('input', () => {
                            setTimeout(() => processSearchResults(), 400);
                            setTimeout(() => processSearchResults(), 800);
                        });
                    }
                }
                
                console.log('PagefindUI initialized successfully');
            } catch (error) {
                console.error('Failed to initialize PagefindUI:', error);
            }
        }

        // Animated Progress Bars - Intersection Observer
        const progressBars = document.querySelectorAll('.progress-bar[data-width]');
        
        if (progressBars.length > 0) {
            const animateProgressBar = (progressBar) => {
                const targetWidth = progressBar.getAttribute('data-width');
                const span = progressBar.querySelector('span');
                
                if (span && targetWidth) {
                    // Add animate class to enable transitions
                    progressBar.classList.add('animate');
                    
                    // Set the CSS custom property and animate
                    progressBar.style.setProperty('--progress-width', targetWidth + '%');
                    
                    // Set the target width after a small delay to trigger animation
                    setTimeout(() => {
                        span.style.width = targetWidth + '%';
                    }, 50);
                }
            };

            // Check if Intersection Observer is supported
            if ('IntersectionObserver' in window) {
                const observerOptions = {
                    root: null,
                    rootMargin: '0px 0px -10% 0px', // Trigger when 90% visible
                    threshold: 0.1
                };

                const observer = new IntersectionObserver((entries) => {
                    entries.forEach((entry) => {
                        if (entry.isIntersecting && !entry.target.classList.contains('animate')) {
                            animateProgressBar(entry.target);
                            // Stop observing this element once animated
                            observer.unobserve(entry.target);
                        }
                    });
                }, observerOptions);

                // Start observing all progress bars
                progressBars.forEach((progressBar) => {
                    observer.observe(progressBar);
                });
            } else {
                // Fallback: animate immediately if Intersection Observer not supported
                progressBars.forEach((progressBar) => {
                    animateProgressBar(progressBar);
                });
            }
        }

        // Animated Methodology Items - Intersection Observer
        const methodologyItems = document.querySelectorAll('.methodology-item[data-animation-delay]');
        
        if (methodologyItems.length > 0) {
            const animateMethodologyItem = (item) => {
                const delay = item.getAttribute('data-animation-delay') || '0s';
                item.style.setProperty('--animation-delay', delay);
                item.classList.add('animate');
            };

            // Check if Intersection Observer is supported
            if ('IntersectionObserver' in window) {
                const observerOptions = {
                    root: null,
                    rootMargin: '0px 0px -10% 0px', // Trigger when 90% visible
                    threshold: 0.1
                };

                const methodologyObserver = new IntersectionObserver((entries) => {
                    entries.forEach((entry) => {
                        if (entry.isIntersecting && !entry.target.classList.contains('animate')) {
                            animateMethodologyItem(entry.target);
                            // Stop observing this element once animated
                            methodologyObserver.unobserve(entry.target);
                        }
                    });
                }, observerOptions);

                // Start observing all methodology items
                methodologyItems.forEach((item) => {
                    methodologyObserver.observe(item);
                });
            } else {
                // Fallback: animate immediately if Intersection Observer not supported
                methodologyItems.forEach((item) => {
                    animateMethodologyItem(item);
                });
            }
        }

        // Animated Framework Items - Intersection Observer
        const frameworkItems = document.querySelectorAll('.framework-item[data-animation-delay]');
        
        if (frameworkItems.length > 0) {
            const animateFrameworkItem = (item) => {
                const delay = item.getAttribute('data-animation-delay') || '0s';
                item.style.setProperty('--animation-delay', delay);
                item.classList.add('animate');
            };

            // Check if Intersection Observer is supported
            if ('IntersectionObserver' in window) {
                const observerOptions = {
                    root: null,
                    rootMargin: '0px 0px -10% 0px', // Trigger when 90% visible
                    threshold: 0.1
                };

                const frameworkObserver = new IntersectionObserver((entries) => {
                    entries.forEach((entry) => {
                        if (entry.isIntersecting && !entry.target.classList.contains('animate')) {
                            animateFrameworkItem(entry.target);
                            // Stop observing this element once animated
                            frameworkObserver.unobserve(entry.target);
                        }
                    });
                }, observerOptions);

                // Start observing all framework items
                frameworkItems.forEach((item) => {
                    frameworkObserver.observe(item);
                });
            } else {
                // Fallback: animate immediately if Intersection Observer not supported
                frameworkItems.forEach((item) => {
                    animateFrameworkItem(item);
                });
            }
        }
    });

    // Copy code functionality for code blocks - Global functions
    window.copyCode = function(button) {
        const codeBlock = button.closest('.code-block');
        if (!codeBlock) return;
        
        const code = codeBlock.querySelector('code');
        if (!code) return;
        
        const textToCopy = code.textContent;
        
        // Use the modern clipboard API if available
        if (navigator.clipboard && window.isSecureContext) {
            navigator.clipboard.writeText(textToCopy).then(() => {
                window.showCopySuccess(button);
            }).catch(err => {
                console.error('Failed to copy code: ', err);
                window.fallbackCopyCode(textToCopy, button);
            });
        } else {
            // Fallback for older browsers
            window.fallbackCopyCode(textToCopy, button);
        }
    };
    
    // Fallback copy method for older browsers
    window.fallbackCopyCode = function(text, button) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            window.showCopySuccess(button);
        } catch (err) {
            console.error('Failed to copy code: ', err);
        } finally {
            document.body.removeChild(textArea);
        }
    };
    
    // Show copy success feedback
    window.showCopySuccess = function(button) {
        const originalIcon = button.innerHTML;
        button.innerHTML = '<i class="fas fa-check"></i>';
        button.classList.add('copy-success');
        
        setTimeout(() => {
            button.innerHTML = originalIcon;
            button.classList.remove('copy-success');
        }, 2000);
    };
</script>

<!-- PrismJS syntax highlighting scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/toolbar/prism-toolbar.min.js"></script>
<script>
    // Initialize PrismJS after DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        // Configure PrismJS autoloader
        if (typeof Prism !== 'undefined') {
            Prism.plugins.autoloader.languages_path = 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/';
            
            // Add language aliases and custom ColdFusion support
            if (Prism.languages) {
                // Create a better ColdFusion language definition
                Prism.languages.coldfusion = Prism.languages.extend('markup', {
                    'cf-tag': {
                        pattern: /<\/?cf[a-z]+(?:\s[^>]*)?\/?>/i,
                        inside: {
                            'tag': {
                                pattern: /<\/?cf[a-z]+/i,
                                inside: {
                                    'punctuation': /^<\/?/,
                                    'namespace': /^cf/
                                }
                            },
                            'attr-name': /[a-z-]+(?=\s*=)/i,
                            'attr-value': {
                                pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s>]+)/i,
                                inside: {
                                    'punctuation': [/^=/, /^['"]|['"]$/]
                                }
                            },
                            'punctuation': /\/?>/
                        }
                    },
                    'cf-script': {
                        pattern: /#[^#]*#/,
                        inside: {
                            'punctuation': /^#|#$/,
                            'keyword': /\b(?:var|if|else|elseif|for|while|function|return|true|false|null)\b/i,
                            'string': /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
                            'number': /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,
                            'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
                            'punctuation': /[{}[\];(),.:]/
                        }
                    },
                    'cf-function': {
                        pattern: /\b[a-zA-Z_]\w*(?=\s*\()/,
                        alias: 'function'
                    }
                });
                
                // Map other CFML variations
                Prism.languages.cfml = Prism.languages.coldfusion;
                Prism.languages.cfscript = Prism.languages.javascript;
            }
        }
    });
</script>
