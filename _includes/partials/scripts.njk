<!-- Shared JavaScript for all layouts -->
<script src="{{ '/pagefind/pagefind-ui.js' | url }}" type="text/javascript" defer></script>
<script>
    window.addEventListener('DOMContentLoaded', (event) => {
        // New Mobile Navigation Toggle
        const navToggle = document.querySelector('.navbar-toggle');
        const navLinks = document.querySelector('.navbar-links');
        const navOverlay = document.querySelector('.nav-overlay');
        const menuClose = document.querySelector('.menu-close');
        
        if (navToggle && navLinks) {
            // Store scroll position for restoration
            let scrollPosition = 0;

            function openMobileMenu() {
                scrollPosition = window.pageYOffset;
                navToggle.setAttribute('aria-expanded', 'true');
                navLinks.classList.add('active');
                navToggle.classList.add('active');
                if (navOverlay) {
                    navOverlay.classList.add('active');
                }
                document.body.classList.add('nav-open');
                document.body.style.top = `-${scrollPosition}px`;
            }

            function closeMobileMenu() {
                navLinks.classList.remove('active');
                navToggle.classList.remove('active');
                navToggle.setAttribute('aria-expanded', 'false');
                if (navOverlay) {
                    navOverlay.classList.remove('active');
                }
                document.body.classList.remove('nav-open');
                document.body.style.top = '';
                if (scrollPosition) {
                    window.scrollTo(0, scrollPosition);
                    scrollPosition = 0;
                }
            }

            // Hamburger menu toggle
            navToggle.addEventListener('click', () => {
                const isExpanded = navToggle.getAttribute('aria-expanded') === 'true';
                
                if (!isExpanded) {
                    openMobileMenu();
                } else {
                    closeMobileMenu();
                }
            });

            // Close button in mobile menu
            if (menuClose) {
                menuClose.addEventListener('click', () => {
                    closeMobileMenu();
                });
            }

            // Close mobile menu when clicking on a nav link
            const navLinkItems = navLinks.querySelectorAll('a');
            navLinkItems.forEach(link => {
                link.addEventListener('click', () => {
                    if (window.innerWidth < 768) {
                        closeMobileMenu();
                    }
                });
            });

            // Close mobile menu when clicking on overlay
            if (navOverlay) {
                navOverlay.addEventListener('click', () => {
                    closeMobileMenu();
                });
            }

            // Close mobile menu when pressing Escape key
            document.addEventListener('keydown', (event) => {
                if (event.key === 'Escape' && navLinks.classList.contains('active')) {
                    closeMobileMenu();
                }
            });

            // Handle window resize - close mobile menu if switching to desktop
            window.addEventListener('resize', () => {
                if (window.innerWidth >= 768) {
                    closeMobileMenu();
                }
            });
        }

        // Function to process search results and apply custom styling
        function processSearchResults() {
            let results;
            try {
                results = document.querySelectorAll('.pagefind-ui__result:not([data-processed="true"])');
            } catch (error) {
                console.error('Error with search results selector:', error);
                // Fallback: get all results and filter manually
                const allResults = document.querySelectorAll('.pagefind-ui__result');
                results = Array.from(allResults).filter(result => !result.hasAttribute('data-processed'));
            }
            
            console.log(`Found ${results.length} unprocessed search results`);
            
            if (results.length === 0) {
                return; // No new results to process
            }
            
            let processedCount = 0;
            
            results.forEach((result, index) => {
                try {
                    // Ensure result is fully rendered by checking for required elements
                    const titleElement = result.querySelector('.pagefind-ui__result-title');
                    const excerptElement = result.querySelector('.pagefind-ui__result-excerpt');
                    
                    if (!titleElement || !excerptElement) {
                        console.log(`Result ${index} not fully loaded yet (missing title or excerpt), skipping...`);
                        return; // Skip this result, it will be processed on next attempt
                    }
                    
                    // Ensure elements have content
                    if (!titleElement.textContent?.trim() || !excerptElement.textContent?.trim()) {
                        console.log(`Result ${index} elements are empty, skipping...`);
                        return;
                    }
                    
                    console.log(`Processing fully loaded result ${index}`);
                    
                    // Find and process default meta tags
                    const metaTags = result.querySelectorAll('.pagefind-ui__result-tag');
                    let categoryData = '';
                    let dateData = '';
                    
                    metaTags.forEach(tag => {
                        const metaType = tag.getAttribute('data-pagefind-ui-meta');
                        const tagText = tag.textContent || '';
                        console.log(`Found meta tag: ${metaType} = ${tagText}`);
                        
                        if (metaType === 'category' || metaType === 'categories') {
                            categoryData = tagText.replace(/^(Category|Categories):\s*/i, '').trim();
                        } else if (metaType === 'date') {
                            dateData = tagText.replace(/^Date:\s*/i, '').trim();
                        }
                    });
                    
                    console.log(`Extracted - Categories: "${categoryData}", Date: "${dateData}"`);
                    
                    // Remove default meta tags
                    metaTags.forEach(tag => tag.remove());
                
                // Find the title element and excerpt
                const titleElement = result.querySelector('.pagefind-ui__result-title');
                const excerptElement = result.querySelector('.pagefind-ui__result-excerpt');
                
                if (titleElement && excerptElement) {
                    // Clean excerpt content
                    let excerptText = excerptElement.innerHTML || '';
                    
                    // Remove any categories/dates that might be embedded in the excerpt
                    excerptText = excerptText
                        .replace(/Categories?:\s*[^.]*?(?=\s{2,}|\.|$)/gi, '')
                        .replace(/Published:\s*[^.]*?(?=\s{2,}|\.|$)/gi, '')
                        .replace(/\s+/g, ' ')
                        .trim();
                    
                    excerptElement.innerHTML = excerptText;
                    
                    // Remove any existing formatted categories/dates from the result
                    const existingCategories = result.querySelector('.blog-post-categories');
                    const existingDate = result.querySelector('.blog-post-date');
                    
                    if (existingCategories) existingCategories.remove();
                    if (existingDate) existingDate.remove();
                    
                    // Add categories if we have category data
                    if (categoryData) {
                        console.log(`Adding categories for result ${index}: ${categoryData}`);
                        const categoryDiv = document.createElement('div');
                        categoryDiv.className = 'blog-post-categories';
                        
                        const categories = categoryData.split(',');
                        categories.forEach((cat, catIndex) => {
                            if (catIndex > 0) {
                                categoryDiv.appendChild(document.createTextNode(' '));
                            }
                            
                            const categoryLink = document.createElement('a');
                            categoryLink.className = 'category-tag';
                            const slug = cat.trim().toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '');
                            
                            // Handle base path for GitHub Pages deployment
                            const basePath = window.location.pathname.includes('/mike-henke-website/') ? '/mike-henke-website' : '';
                            categoryLink.href = `${basePath}/blog/category/${slug}/`;
                            categoryLink.textContent = cat.trim();
                            categoryDiv.appendChild(categoryLink);
                        });
                        
                        // Insert categories right after the title
                        titleElement.insertAdjacentElement('afterend', categoryDiv);
                    }
                    
                    // Add date if we have date data
                    if (dateData) {
                        console.log(`Adding date for result ${index}: ${dateData}`);
                        const dateP = document.createElement('p');
                        dateP.className = 'blog-post-date';
                        dateP.innerHTML = `<em>Published: ${dateData}</em>`;
                        
                        // Insert date at the very end (after excerpt)
                        const resultContainer = result.querySelector('.pagefind-ui__result-inner') || result;
                        resultContainer.appendChild(dateP);
                    }
                    
                    // Mark as processed to avoid duplicate processing
                    result.dataset.processed = 'true';
                    processedCount++;
                    console.log(`Result ${index} marked as processed`);
                    
                } catch (error) {
                    console.error(`Error processing search result ${index}:`, error);
                    // Still mark as processed to avoid infinite retry
                    result.dataset.processed = 'true';
                }
            });
            
            console.log(`Successfully processed ${processedCount} out of ${results.length} search results`);
            
            // If some results weren't processed, schedule another attempt
            if (processedCount < results.length) {
                console.log(`Scheduling retry for ${results.length - processedCount} unprocessed results`);
                setTimeout(() => processSearchResults(), 200);
            }
        }

        // Initialize Pagefind Search if search element exists
        if (document.getElementById("search")) {
            try {
                // Auto-detect bundle path or use explicit path
                const bundlePath = window.location.pathname.includes('/search/') ? '../pagefind/' : '/pagefind/';
                
                const searchConfig = { 
                    element: "#search", 
                    showSubResults: true,
                    showEmptyFilters: false,
                    resetStyles: false,
                    autofocus: true,
                    debounceTimeoutMs: 300,
                    bundlePath: bundlePath,
                    excerptLength: 30
                };

                // Add custom result template for search page
                if (window.location.pathname.includes('/search/')) {
                    searchConfig.showImages = false;
                    searchConfig.showSubResults = true;
                }
                
                const pagefindUI = new PagefindUI(searchConfig);
                
                // Process results after they load (works on any page with search)
                const searchElement = document.getElementById("search");
                if (searchElement) {
                    console.log('Setting up search results observer');
                    
                    let processingTimeout;
                    
                    // Single robust observer with debouncing
                    const observer = new MutationObserver((mutations) => {
                        let shouldProcess = false;
                        
                        mutations.forEach((mutation) => {
                            if (mutation.addedNodes.length > 0) {
                                // Check if search results were added
                                const hasResults = Array.from(mutation.addedNodes).some(node => 
                                    node.nodeType === 1 && 
                                    (node.classList && node.classList.contains('pagefind-ui__result') || 
                                     (node.querySelector && node.querySelector('.pagefind-ui__result')))
                                );
                                
                                if (hasResults) {
                                    shouldProcess = true;
                                }
                            }
                        });
                        
                        if (shouldProcess) {
                            console.log('New search results detected, scheduling processing...');
                            
                            // Clear any existing timeout to debounce rapid changes
                            if (processingTimeout) {
                                clearTimeout(processingTimeout);
                            }
                            
                            // Process after DOM has settled
                            processingTimeout = setTimeout(() => {
                                console.log('Processing search results...');
                                processSearchResults();
                            }, 100);
                        }
                    });
                    
                    observer.observe(searchElement, { 
                        childList: true, 
                        subtree: true 
                    });
                    
                    // Process any existing results that might have loaded before observer setup
                    setTimeout(() => processSearchResults(), 100);
                    const searchInput = searchElement.querySelector('input[type="search"]');
                    if (searchInput) {
                        searchInput.addEventListener('input', () => {
                            setTimeout(() => processSearchResults(), 400);
                            setTimeout(() => processSearchResults(), 800);
                        });
                    }
                }
                
                console.log('PagefindUI initialized successfully');
            } catch (error) {
                console.error('Failed to initialize PagefindUI:', error);
            }
        }

        // Animated Progress Bars - Intersection Observer
        const progressBars = document.querySelectorAll('.progress-bar[data-width]');
        
        if (progressBars.length > 0) {
            const animateProgressBar = (progressBar) => {
                const targetWidth = progressBar.getAttribute('data-width');
                const span = progressBar.querySelector('span');
                
                if (span && targetWidth) {
                    // Add animate class to enable transitions
                    progressBar.classList.add('animate');
                    
                    // Set the target width after a small delay to trigger animation
                    setTimeout(() => {
                        span.style.width = targetWidth + '%';
                    }, 50);
                }
            };

            // Check if Intersection Observer is supported
            if ('IntersectionObserver' in window) {
                const observerOptions = {
                    root: null,
                    rootMargin: '0px 0px -10% 0px', // Trigger when 90% visible
                    threshold: 0.1
                };

                const observer = new IntersectionObserver((entries) => {
                    entries.forEach((entry) => {
                        if (entry.isIntersecting && !entry.target.classList.contains('animate')) {
                            animateProgressBar(entry.target);
                            // Stop observing this element once animated
                            observer.unobserve(entry.target);
                        }
                    });
                }, observerOptions);

                // Start observing all progress bars
                progressBars.forEach((progressBar) => {
                    observer.observe(progressBar);
                });
            } else {
                // Fallback: animate immediately if Intersection Observer not supported
                progressBars.forEach((progressBar) => {
                    animateProgressBar(progressBar);
                });
            }
        }

        // Animated Methodology Items - Intersection Observer
        const methodologyItems = document.querySelectorAll('.methodology-item[data-animation-delay]');
        
        if (methodologyItems.length > 0) {
            const animateMethodologyItem = (item) => {
                const delay = item.getAttribute('data-animation-delay') || '0s';
                item.style.setProperty('--animation-delay', delay);
                item.classList.add('animate');
            };

            // Check if Intersection Observer is supported
            if ('IntersectionObserver' in window) {
                const observerOptions = {
                    root: null,
                    rootMargin: '0px 0px -10% 0px', // Trigger when 90% visible
                    threshold: 0.1
                };

                const methodologyObserver = new IntersectionObserver((entries) => {
                    entries.forEach((entry) => {
                        if (entry.isIntersecting && !entry.target.classList.contains('animate')) {
                            animateMethodologyItem(entry.target);
                            // Stop observing this element once animated
                            methodologyObserver.unobserve(entry.target);
                        }
                    });
                }, observerOptions);

                // Start observing all methodology items
                methodologyItems.forEach((item) => {
                    methodologyObserver.observe(item);
                });
            } else {
                // Fallback: animate immediately if Intersection Observer not supported
                methodologyItems.forEach((item) => {
                    animateMethodologyItem(item);
                });
            }
        }

        // Animated Framework Items - Intersection Observer
        const frameworkItems = document.querySelectorAll('.framework-item[data-animation-delay]');
        
        if (frameworkItems.length > 0) {
            const animateFrameworkItem = (item) => {
                const delay = item.getAttribute('data-animation-delay') || '0s';
                item.style.setProperty('--animation-delay', delay);
                item.classList.add('animate');
            };

            // Check if Intersection Observer is supported
            if ('IntersectionObserver' in window) {
                const observerOptions = {
                    root: null,
                    rootMargin: '0px 0px -10% 0px', // Trigger when 90% visible
                    threshold: 0.1
                };

                const frameworkObserver = new IntersectionObserver((entries) => {
                    entries.forEach((entry) => {
                        if (entry.isIntersecting && !entry.target.classList.contains('animate')) {
                            animateFrameworkItem(entry.target);
                            // Stop observing this element once animated
                            frameworkObserver.unobserve(entry.target);
                        }
                    });
                }, observerOptions);

                // Start observing all framework items
                frameworkItems.forEach((item) => {
                    frameworkObserver.observe(item);
                });
            } else {
                // Fallback: animate immediately if Intersection Observer not supported
                frameworkItems.forEach((item) => {
                    animateFrameworkItem(item);
                });
            }
        }
    });

    // Copy code functionality for code blocks - Global functions
    window.copyCode = function(button) {
        const codeBlock = button.closest('.code-block');
        if (!codeBlock) return;
        
        const code = codeBlock.querySelector('code');
        if (!code) return;
        
        const textToCopy = code.textContent;
        
        // Use the modern clipboard API if available
        if (navigator.clipboard && window.isSecureContext) {
            navigator.clipboard.writeText(textToCopy).then(() => {
                window.showCopySuccess(button);
            }).catch(err => {
                console.error('Failed to copy code: ', err);
                window.fallbackCopyCode(textToCopy, button);
            });
        } else {
            // Fallback for older browsers
            window.fallbackCopyCode(textToCopy, button);
        }
    };
    
    // Fallback copy method for older browsers
    window.fallbackCopyCode = function(text, button) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            window.showCopySuccess(button);
        } catch (err) {
            console.error('Failed to copy code: ', err);
        } finally {
            document.body.removeChild(textArea);
        }
    };
    
    // Show copy success feedback
    window.showCopySuccess = function(button) {
        const originalIcon = button.innerHTML;
        button.innerHTML = '<i class="fas fa-check"></i>';
        button.classList.add('copy-success');
        
        setTimeout(() => {
            button.innerHTML = originalIcon;
            button.classList.remove('copy-success');
        }, 2000);
    };
</script>

<!-- PrismJS syntax highlighting scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/toolbar/prism-toolbar.min.js"></script>
<script>
    // Initialize PrismJS after DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        // Configure PrismJS autoloader
        if (typeof Prism !== 'undefined') {
            Prism.plugins.autoloader.languages_path = 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/';
            
            // Add language aliases and custom ColdFusion support
            if (Prism.languages) {
                // Create a better ColdFusion language definition
                Prism.languages.coldfusion = Prism.languages.extend('markup', {
                    'cf-tag': {
                        pattern: /<\/?cf[a-z]+(?:\s[^>]*)?\/?>/i,
                        inside: {
                            'tag': {
                                pattern: /<\/?cf[a-z]+/i,
                                inside: {
                                    'punctuation': /^<\/?/,
                                    'namespace': /^cf/
                                }
                            },
                            'attr-name': /[a-z-]+(?=\s*=)/i,
                            'attr-value': {
                                pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s>]+)/i,
                                inside: {
                                    'punctuation': [/^=/, /^['"]|['"]$/]
                                }
                            },
                            'punctuation': /\/?>/
                        }
                    },
                    'cf-script': {
                        pattern: /#[^#]*#/,
                        inside: {
                            'punctuation': /^#|#$/,
                            'keyword': /\b(?:var|if|else|elseif|for|while|function|return|true|false|null)\b/i,
                            'string': /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
                            'number': /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,
                            'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
                            'punctuation': /[{}[\];(),.:]/
                        }
                    },
                    'cf-function': {
                        pattern: /\b[a-zA-Z_]\w*(?=\s*\()/,
                        alias: 'function'
                    }
                });
                
                // Map other CFML variations
                Prism.languages.cfml = Prism.languages.coldfusion;
                Prism.languages.cfscript = Prism.languages.javascript;
            }
        }
    });
</script>
