<!-- Search functionality scripts - Improved with minimal DOM manipulation -->
<script src="{{ '/pagefind/pagefind-ui.js' | url }}" type="text/javascript" defer></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Configuration
    const SEARCH_CONFIG = {
        debounceMs: 300,
        excerptLength: 300,
        pageSize: 8
    };
    
    // Clean excerpt text to match server-side blogExcerpt filter
    function cleanExcerpt(text) {
        if (!text) return '';
        
        return text
            .replace(/^.*?Published on.*?\d{4}\.?\s*/i, '') // Remove date prefix
            .replace(/\[code[^\]]*\][\s\S]*?\[\/code\]/gi, ' ') // Remove code blocks
            .replace(/<div class="code-block">[\s\S]*?<\/div>/gi, ' ')
            .replace(/\[(?:\/)?code[^\]]*\]/gi, ' ')
            .replace(/<[^>]*>/g, ' ') // Remove HTML
            .replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&apos;/g, "'")
            .replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&')
            .replace(/\s+/g, ' ').trim();
    }
    
    // Process each result to add metadata as data attributes
    function processResult(result) {
        // Extract categories
        let categories = [];
        if (result.filters && result.filters.category) {
            categories = Array.isArray(result.filters.category) 
                ? result.filters.category 
                : [result.filters.category];
        }
        
        // Use custom excerpt if available, otherwise clean the content
        let excerpt = '';
        if (result.meta && result.meta.custom_excerpt) {
            excerpt = result.meta.custom_excerpt;
        } else if (result.raw_content) {
            excerpt = cleanExcerpt(result.raw_content);
            if (excerpt.length > SEARCH_CONFIG.excerptLength) {
                const truncated = excerpt.substring(0, SEARCH_CONFIG.excerptLength);
                const lastSpace = truncated.lastIndexOf(' ');
                excerpt = (lastSpace > SEARCH_CONFIG.excerptLength * 0.8) 
                    ? truncated.substring(0, lastSpace) + '...'
                    : truncated + '...';
            }
        }
        
        // Add metadata for CSS/data attribute usage
        result.meta = result.meta || {};
        result.meta.categories = categories;
        result.meta.categoryCount = categories.length;
        result.meta.cleanExcerpt = excerpt;
        result.meta.isBlogPost = result.url.match(/^\/[^\/]+\/$/) && 
                                !result.url.includes('/search/') && 
                                !result.url.includes('/category/') && 
                                result.url !== '/';
        
        if (excerpt) {
            result.excerpt = excerpt;
        }
        
        return result;
    }
    
    // Minimal DOM enhancement using CSS classes and data attributes
    function enhanceResults() {
        const results = document.querySelectorAll('.pagefind-ui__result:not([data-enhanced])');
        
        results.forEach(result => {
            const link = result.querySelector('.pagefind-ui__result-link');
            if (!link) return;
            
            const url = link.getAttribute('href');
            const isBlogPost = url.match(/^\/[^\/]+\/$/) && 
                              !url.includes('/search/') && 
                              !url.includes('/category/') && 
                              url !== '/';
            
            if (isBlogPost) {
                // Add CSS class for styling
                result.classList.add('search-result-blog-post');
                
                // Add categories as data attributes for CSS content generation
                const categoriesFromUrl = extractCategoriesFromResult(result);
                if (categoriesFromUrl.length > 0) {
                    result.dataset.categories = categoriesFromUrl.join(',');
                    result.dataset.categoryCount = categoriesFromUrl.length;
                    
                    // Add category links after title using CSS content
                    const categoryContainer = document.createElement('div');
                    categoryContainer.className = 'result-categories';
                    categoryContainer.setAttribute('aria-label', `Categories: ${categoriesFromUrl.join(', ')}`);
                    
                    categoriesFromUrl.forEach(category => {
                        const categoryLink = document.createElement('a');
                        categoryLink.href = `/category/${category.toLowerCase().replace(/\s+/g, '-')}/`;
                        categoryLink.className = 'category-tag';
                        categoryLink.textContent = category;
                        categoryContainer.appendChild(categoryLink);
                    });
                    
                    const title = result.querySelector('.pagefind-ui__result-title');
                    if (title) {
                        title.insertAdjacentElement('afterend', categoryContainer);
                    }
                }
            }
            
            result.setAttribute('data-enhanced', 'true');
        });
    }
    
    // Extract categories from Pagefind filter data
    function extractCategoriesFromResult(resultElement) {
        // This would need to be populated from the processResult function
        // For now, we'll rely on the data being added during processResult
        const categoriesAttr = resultElement.dataset.categories;
        if (categoriesAttr) {
            return categoriesAttr.split(',').filter(Boolean);
        }
        return [];
    }
    
    // Initialize Pagefind with clean configuration
    function initializeSearch() {
        if (!document.getElementById("search")) return;
        
        try {
            const searchConfig = {
                element: "#search",
                processResult: processResult,
                showFilters: false, // Hide filter sidebar
                debounceTimeoutMs: SEARCH_CONFIG.debounceMs,
                excerptLength: 25, // Pagefind excerpt length (we override in processResult)
                pageSize: SEARCH_CONFIG.pageSize,
                showImages: false,
                resetStyles: false,
                autofocus: window.location.pathname.includes('/search/'),
                bundlePath: window.location.pathname.includes('/search/') ? '../pagefind/' : '/pagefind/',
                translations: {
                    placeholder: "Search articles, posts, and pages...",
                    clear_search: "Clear",
                    load_more: "Load more results",
                    zero_results: "No results found",
                    many_results: "results found",
                    one_result: "result found"
                }
            };
            
            const pagefindUI = new PagefindUI(searchConfig);
            
            // Enhanced results after Pagefind renders
            const searchElement = document.getElementById("search");
            const observer = new MutationObserver(function(mutations) {
                let resultsChanged = false;
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList' && 
                        mutation.target.classList.contains('pagefind-ui__results')) {
                        resultsChanged = true;
                    }
                });
                
                if (resultsChanged) {
                    setTimeout(enhanceResults, 100);
                }
            });
            
            observer.observe(searchElement, { childList: true, subtree: true });
            
        } catch (error) {
            console.error('Failed to initialize search:', error);
        }
    }
    
    // Keyboard shortcuts
    document.addEventListener('keydown', function(event) {
        if ((event.ctrlKey || event.metaKey) && event.key === 'k') {
            event.preventDefault();
            const searchInput = document.querySelector('.pagefind-ui__search-input');
            if (searchInput) {
                searchInput.focus();
                searchInput.select();
            }
        }
        
        if (event.key === 'Escape') {
            const searchInput = document.querySelector('.pagefind-ui__search-input');
            if (searchInput && document.activeElement === searchInput) {
                searchInput.value = '';
                searchInput.dispatchEvent(new Event('input', { bubbles: true }));
            }
        }
    });
    
    // Initialize
    initializeSearch();
});
</script>
