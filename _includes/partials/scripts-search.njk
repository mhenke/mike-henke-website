<!-- Search functionality scripts - Clean, maintainable approach -->
<script src="{{ '/pagefind/pagefind-ui.js' | url }}" type="text/javascript" defer></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    
    // Clean excerpt to match server-side blogExcerpt filter
    function cleanExcerpt(text) {
        if (!text) return '';
        
        return text
            .replace(/^.*?Published on.*?\d{4}\.?\s*/i, '') // Remove date prefix
            .replace(/\[code[^\]]*\][\s\S]*?\[\/code\]/gi, ' ') // Remove code blocks
            .replace(/<div class="code-block">[\s\S]*?<\/div>/gi, ' ')
            .replace(/\[(?:\/)?code[^\]]*\]/gi, ' ')
            .replace(/<[^>]*>/g, ' ') // Remove HTML
            .replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&apos;/g, "'")
            .replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&')
            .replace(/\s+/g, ' ').trim();
    }
    
    // Process each result to prepare data for minimal DOM enhancement
    function processResult(result) {
        // Extract categories - avoid optional chaining for Nunjucks compatibility
        let categories = [];
        if (result.filters && result.filters.category) {
            categories = Array.isArray(result.filters.category) 
                ? result.filters.category 
                : new Array(result.filters.category);
        }
        
        // Clean excerpt - use custom excerpt if available
        let excerpt = '';
        if (result.meta && result.meta.custom_excerpt) {
            excerpt = result.meta.custom_excerpt;
        } else if (result.raw_content) {
            excerpt = cleanExcerpt(result.raw_content);
            // Truncate if needed
            if (excerpt.length > 300) {
                const truncated = excerpt.substring(0, 300);
                const lastSpace = truncated.lastIndexOf(' ');
                excerpt = (lastSpace > 240) 
                    ? truncated.substring(0, lastSpace) + '...'
                    : truncated + '...';
            }
        }
        // Determine if this is a blog post
        const isBlogPost = result.url.match(new RegExp('^/[^/]+/$')) && 
                          !result.url.includes('/search/') && 
                          !result.url.includes('/category/') && 
                          result.url !== '/';
        
        // Store metadata for DOM enhancement
        result._enhanceData = {
            categories,
            isBlogPost,
            cleanExcerpt: excerpt
        };
        
        // Use clean excerpt
        if (excerpt) {
            result.excerpt = excerpt;
        }
        
        return result;
    }
    
    // Minimal DOM enhancement - only add what CSS can't handle
    function enhanceResults() {
        const allResults = document.querySelectorAll('.pagefind-ui__result');
        const results = Array.from(allResults).filter(result => !result.hasAttribute('data-enhanced'));
        
        console.log(`Enhancing ${results.length} search results out of ${allResults.length} total results`);
        
        results.forEach((result, index) => {
            try {
                // Mark as processed early to prevent reprocessing
                result.setAttribute('data-enhanced', 'true');
                
                const link = result.querySelector('.pagefind-ui__result-link');
                if (!link) {
                    console.warn(`Result ${index}: No link found`);
                    return;
                }
                
                const url = link.getAttribute('href');
                if (!url) {
                    console.warn(`Result ${index}: No URL found`);
                    return;
                }
                
                const isBlogPost = url.match(new RegExp('^/[^/]+/$')) && 
                                  !url.includes('/search/') && 
                                  !url.includes('/category/') && 
                                  url !== '/';
                
                console.log(`Result ${index}: URL=${url}, isBlogPost=${isBlogPost}`);
                
                if (isBlogPost) {
                // Completely rebuild the structure to match blog cards
                const categories = extractCategoriesForUrl(url);
                
                // Get original data
                const originalTitle = result.querySelector('.pagefind-ui__result-title a');
                const originalExcerpt = result.querySelector('.pagefind-ui__result-excerpt');
                
                if (originalTitle && originalExcerpt) {
                    const titleText = originalTitle.textContent;
                    const excerptText = originalExcerpt.textContent;
                    const href = originalTitle.getAttribute('href');
                    
                    // Extract date from metadata
                    let publishDate = '';
                    if (result.meta && result.meta.date) {
                        try {
                            const date = new Date(result.meta.date);
                            const options = { year: 'numeric', month: 'long', day: 'numeric' };
                            publishDate = date.toLocaleDateString('en-US', options);
                        } catch (e) {
                            console.warn('Could not parse date:', result.meta.date);
                        }
                    }
                    
                    // Clear the existing content
                    result.innerHTML = '';
                    
                    // Add blog card classes
                    result.classList.add('blog-post-card');
                    
                    // Create the new structure exactly like blog cards
                    const titleElement = document.createElement('h3');
                    titleElement.className = 'blog-post-title';
                    
                    const titleLink = document.createElement('a');
                    titleLink.href = href;
                    titleLink.textContent = titleText;
                    titleElement.appendChild(titleLink);
                    
                    result.appendChild(titleElement);
                    
                    // Add categories if they exist
                    if (categories.length > 0) {
                        const categoryContainer = document.createElement('div');
                        categoryContainer.className = 'blog-post-categories';
                        
                        categories.forEach(category => {
                            const categoryLink = document.createElement('a');
                            // Use correct category slug format - preserve case, just trim whitespace (matches categorySlug filter)
                            categoryLink.href = `/category/${category.trim()}/`;
                            categoryLink.className = 'category-tag';
                            categoryLink.textContent = category;
                            categoryContainer.appendChild(categoryLink);
                        });
                        
                        result.appendChild(categoryContainer);
                    }
                    
                    // Add excerpt
                    const excerptElement = document.createElement('p');
                    excerptElement.className = 'blog-post-excerpt';
                    excerptElement.textContent = excerptText;
                    result.appendChild(excerptElement);
                    
                    // Add publication date if available
                    if (publishDate) {
                        const metaElement = document.createElement('footer');
                        metaElement.className = 'blog-post-meta';
                        
                        const timeElement = document.createElement('time');
                        timeElement.textContent = `Published on ${publishDate}`;
                        
                        metaElement.appendChild(timeElement);
                        result.appendChild(metaElement);
                    }
                }
            } else {
                console.log(`Result ${index}: Not a blog post, skipping enhancement`);
            }
                
            } catch (error) {
                console.error(`Error enhancing result ${index}:`, error);
                // Remove the enhanced marker so it can be retried
                result.removeAttribute('data-enhanced');
            }
        });
        
        console.log(`Enhancement complete. Total enhanced results: ${document.querySelectorAll('.pagefind-ui__result[data-enhanced="true"]').length}`);
    }
    
    // Add function to update results count
    function updateResultsCount() {
        const resultsContainer = document.querySelector('.pagefind-ui__results');
        const messageElement = document.querySelector('.pagefind-ui__message');
        
        if (resultsContainer && messageElement) {
            const resultElements = resultsContainer.querySelectorAll('.pagefind-ui__result');
            const resultCount = resultElements.length;
            
            // Get search term
            const searchInput = document.querySelector('.pagefind-ui__search-input');
            const searchTerm = searchInput ? searchInput.value.trim() : '';
            
            if (searchTerm && resultCount > 0) {
                // Create or update custom results message
                let customMessage = document.querySelector('.custom-search-message');
                if (!customMessage) {
                    customMessage = document.createElement('div');
                    customMessage.className = 'custom-search-message';
                    messageElement.parentNode.insertBefore(customMessage, messageElement);
                }
                
                const resultText = resultCount === 1 ? 'result' : 'results';
                customMessage.innerHTML = `
                    <p class="search-no-results-text">
                        <strong>${resultCount}</strong> ${resultText} found for "<em>${searchTerm}</em>"
                    </p>
                `;
                
                // Hide the default message
                messageElement.style.display = 'none';
            } else if (searchTerm && resultCount === 0) {
                // Show no results message
                let customMessage = document.querySelector('.custom-search-message');
                if (!customMessage) {
                    customMessage = document.createElement('div');
                    customMessage.className = 'custom-search-message';
                    messageElement.parentNode.insertBefore(customMessage, messageElement);
                }
                
                customMessage.innerHTML = `
                    <p class="search-no-results-text">
                        No results found for "<em>${searchTerm}</em>". Try different keywords or browse <a href="/blog/" class="search-no-results-link">all posts</a>.
                    </p>
                `;
                
                messageElement.style.display = 'none';
            } else {
                // Clear custom message when no search term
                const customMessage = document.querySelector('.custom-search-message');
                if (customMessage) {
                    customMessage.remove();
                }
                messageElement.style.display = '';
            }
        }
    }
    
    // Simple cache for categories (much cleaner than before)
    const categoryCache = new Map();
    
    function extractCategoriesForUrl(url) {
        return categoryCache.get(url) || [];
    }
    
    // Store categories during result processing
    function storeCategories(result) {
        if (result._enhanceData && result._enhanceData.categories) {
            categoryCache.set(result.url, result._enhanceData.categories);
        }
    }
    
    // Initialize Pagefind with clean configuration
    function initializeSearch() {
        if (!document.getElementById("search")) return;
        
        try {
            const searchConfig = {
                element: "#search",
                processResult: function(result) {
                    const processed = processResult(result);
                    storeCategories(processed);
                    return processed;
                },
                showFilters: false, // Hide filter sidebar
                debounceTimeoutMs: 300,
                excerptLength: 25, // Let our processResult handle excerpts
                pageSize: 8,
                showImages: false,
                resetStyles: false,
                autofocus: window.location.pathname.includes('/search/'),
                bundlePath: window.location.pathname.includes('/search/') ? '../pagefind/' : '/pagefind/',
                translations: {
                    placeholder: "Search articles, posts, and pages...",
                    clear_search: "Clear",
                    load_more: "Load more results",
                    zero_results: "No results found",
                    many_results: "results found",
                    one_result: "result found"
                }
            };
            
            const pagefindUI = new PagefindUI(searchConfig);
            
            // Enhanced results after Pagefind renders - improved timing
            const searchElement = document.getElementById("search");
            let enhanceTimeout;
            
            const observer = new MutationObserver(function(mutations) {
                let resultsChanged = false;
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList') {
                        // Check if results container or its children changed
                        const target = mutation.target;
                        if (target.classList && (
                            target.classList.contains('pagefind-ui__results') ||
                            target.closest('.pagefind-ui__results') ||
                            target.querySelector('.pagefind-ui__result')
                        )) {
                            resultsChanged = true;
                        }
                    }
                });
                
                if (resultsChanged) {
                    // Clear previous timeout to avoid multiple calls
                    clearTimeout(enhanceTimeout);
                    
                    // Multiple timeouts to catch all result rendering phases
                    enhanceTimeout = setTimeout(() => {
                        enhanceResults();
                        updateResultsCount();
                        
                        // Second pass after a longer delay to catch any late-loading results
                        setTimeout(() => {
                            enhanceResults();
                            updateResultsCount();
                        }, 200);
                    }, 100);
                }
            });
            
            observer.observe(searchElement, { 
                childList: true, 
                subtree: true,
                attributes: false,
                attributeOldValue: false,
                characterData: false,
                characterDataOldValue: false
            });
            
        } catch (error) {
            console.error('Failed to initialize search:', error);
        }
    }
    
    // Keyboard shortcuts (keep the good UX features)
    document.addEventListener('keydown', function(event) {
        if ((event.ctrlKey || event.metaKey) && event.key === 'k') {
            event.preventDefault();
            const searchInput = document.querySelector('.pagefind-ui__search-input');
            if (searchInput) {
                searchInput.focus();
                searchInput.select();
            }
        }
        
        if (event.key === 'Escape') {
            const searchInput = document.querySelector('.pagefind-ui__search-input');
            if (searchInput && document.activeElement === searchInput) {
                searchInput.value = '';
                searchInput.dispatchEvent(new Event('input', { bubbles: true }));
            }
        }
    });
    
    // Initialize
    initializeSearch();
    
    // Fallback: Check for unenhanced results periodically
    let fallbackChecks = 0;
    const maxFallbackChecks = 10;
    
    function fallbackEnhancement() {
        if (fallbackChecks >= maxFallbackChecks) return;
        
        const unenhancedResults = document.querySelectorAll('.pagefind-ui__result:not([data-enhanced])');
        if (unenhancedResults.length > 0) {
            console.log(`Fallback enhancement: Found ${unenhancedResults.length} unenhanced results`);
            enhanceResults();
            updateResultsCount();
        }
        
        fallbackChecks++;
        if (fallbackChecks < maxFallbackChecks) {
            setTimeout(fallbackEnhancement, 500);
        }
    }
    
    // Start fallback checks after a delay
    setTimeout(fallbackEnhancement, 1000);
});
</script>
